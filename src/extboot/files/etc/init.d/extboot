#!/bin/sh /etc/rc.common

# extboot
# Finds and checks the first kexec bootable external devices such as usb stick,
# mmc/sd/micros and check if it is bootable using kexec, when it is, extboot boot it.

START=10

do_kexec(){
    local _tgt=$1
    local _dev=$(basename $_tgt) # device name xxyzz
    
    kexec -l "/tmp/extboot/vmlinuz@${_dev}" --append=root="$_tgt"
    kexec -e
    
}

missing_rsr()
{
    # Checks resource list files or directories existence
    local _mnt_pth=$1
    local _rsr_lst=$2
    local _miss_cnt=0
    
    _rsr_lst=$(echo $_rsr_lst | sed 's/;/ /g') # decode list
    
    #echo "_mnt_pth: "$_mnt_pth " _rsr_lst: "$_rsr_lst " _miss_cnt: "$_miss_cnt >> /tmp/extboot.log
    
    for rsr in $_rsr_lst; do
        if [ ! -e "${_mnt_pth}${rsr}" ];then
            logger -t "externalboot" "Resource $rsr not found in $_mnt_pth"
            _miss_cnt=$(expr $_miss_cnt + 1)            
        fi
        #echo "rsr: "$rsr " _miss_cnt: "$_miss_cnt "path: "${_mnt_pth}${rsr}  >> /tmp/extboot.log
    done
    
    
    #echo "0_miss_cnt: "$_miss_cnt >> /tmp/extboot.log
    echo $_miss_cnt # Missing resource counter
    
}

is_booteable(){
    local _tgt=$1  # Target devices /dev/xxyzz
    local _dev=$(basename $_tgt) # device name xxyzz
    
    # Essential files to do kernel execution
    local _files_lst="/sbin/init /boot/vmlinuz"
    # Basic rootfs directories
    local _dirs_lst="/bin /dev /etc/ /lib /mnt /root /sbin /usr /var"
    
    local _rsp=false # By defualt not booteable
    
        
    # Check if the target is mounted, if not mount it
    # TODO do all with awk
    local _mnt_pth=$(cat /proc/mounts | grep $_tgt | awk -F ' ' '{print $2}')
    # Obtain a valid non matching value
    local _no_mnt_pth=$(cat /proc/mounts | grep /dev/jcgodxxx | awk -F ' ' '{print $2}') 
    if [ "$_mnt_pth" == "$_no_mnt_pth" ];then
        _mnt_pth="/tmp/extboot/"$_dev # Temporal mount point path
        mkdir -p $_mnt_pth >/dev/null 2>&1
        mount $_tgt $_mnt_pth >/dev/null 2>&1
    fi
        
  
    # Checking essential files to complete basic kernel execution
    local _files_lst=$(echo $_files_lst | sed 's/ /;/g') # encode list
    #echo "_mnt_pth: "$_mnt_pth " _files_lst: "$_files_lst >> /tmp/extboot.log
    if [ $(missing_rsr $_mnt_pth $_files_lst) = 0 ];then
        # Checking base rootfs directories
        local _dirs_lst=$(echo $_dirs_lst | sed 's/ /;/g') # encode list
        #echo "_mnt_pth: "$_mnt_pth " _dirs_lst: "$_dirs_lst >> /tmp/extboot.log
        if [ $(missing_rsr $_mnt_pth $_dirs_lst) = 0 ];then
            _rsp=true # Booteable target
            mkdir -p /tmp/extboot/
            ln -s $_mnt_pth"/boot/vmlinuz" "/tmp/extboot/vmlinuz@${_dev}"
        fi
    fi
    
    # If it is not booteable, restore system mount configuration
    if ( ! $_rsp ); then
        umount $_tgt >/dev/null 2>&1
        /sbin/block mount >/dev/null 2>&1
        rm "/tmp/extboot/"$_dev -r >/dev/null 2>&1
    fi
         
    echo $_rsp 
}

start() {         
    tgt_lst=$(block info | awk -F: '{print $1}')
    for tgt in $tgt_lst; do
        if "$(is_booteable $tgt)" ;then            
            do_kexec $tgt
        fi
    done
}
